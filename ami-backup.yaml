AWSTemplateFormatVersion: 2010-09-09
Parameters:
  EC2InstanceId:
    Type: "String"
    Description: "One EC2 Instance ID, or a list of EC2 Instance IDs seperated by commas (e.g. i-xxx,i-yyy,i-zzz)."
  MaxAMINumber:
    Type: "String"
    Description: "Maximum number of saved AMIs (1-100)"


Resources:
  EC2AMIBackupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Path: "/"
      Policies:
        -
          PolicyName: "ec2amibackup"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: ["ec2:*","ssm:GetParameter"]
                Resource: "*"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  EC2AMIScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: 'Triggers notifier lambda every 2 hours'
      ScheduleExpression: rate(2 hours)
      Targets:
        - Arn: !GetAtt EC2AMIBackupFunction.Arn
          Id: TargetFunctionV1

  PermissionForEventsToInvokeEC2AMIBackupFunction:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EC2AMIBackupFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EC2AMIScheduledRule.Arn

  EC2AMIBackupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.7
      Role: !GetAtt EC2AMIBackupRole.Arn
      Code:
        ZipFile: !Sub |
          import boto3
          import time
          import re
          from botocore.exceptions import ClientError
          def lambda_handler(event, context):
              clientSSM = boto3.client('ssm')
              MAX_AMI = int(clientSSM.get_parameter(Name='EC2AMIMaxSnapshotNumber')['Parameter']['Value'])
              EC2_IDS = clientSSM.get_parameter(Name='EC2AMIId')['Parameter']['Value'].split(',')
              EC2 = boto3.resource('ec2')
              clientEC2 = boto3.client('ec2')
              for EC2_ID in EC2_IDS:
                  EC2_Client_Instance = clientEC2.describe_instances(
                      InstanceIds=[EC2_ID]
                  )
                  EC2_EBS_number = len(EC2_Client_Instance['Reservations'][0]['Instances'][0]['BlockDeviceMappings'])
                  First_EBS_Volume = EC2_Client_Instance['Reservations'][0]['Instances'][0]['BlockDeviceMappings'][0]['Ebs'][
                      'VolumeId']
                  ebs_snapshots = clientEC2.describe_snapshots(
                      Filters=[
                          {
                              'Name': 'volume-id',
                              'Values': [First_EBS_Volume]
                          },
                      ],
                  )['Snapshots']
                  snapshots_createdBy_AMI = []
                  for ebs_snapshot in ebs_snapshots:
                      if ebs_snapshot['Description'].find('Created by CreateImage') != -1:
                          snapshots_createdBy_AMI.append(ebs_snapshot)
                  # check if the number of AMI is more than MAX_AMI, if true, delete the oldest AMI
                  for i in range(0, len(snapshots_createdBy_AMI) - MAX_AMI + 1):
                      # find the oldest AMI ID
                      oldest_snapshot = snapshots_createdBy_AMI[0]
                      for snapshot_createdBy_AMI in snapshots_createdBy_AMI:
                          if oldest_snapshot['StartTime'] > snapshot_createdBy_AMI['StartTime']:
                              oldest_snapshot = snapshot_createdBy_AMI
                      oldest_snapshot_description = oldest_snapshot['Description']
                      rule = r'(ami\-.*) from'
                      AMI_ID = re.findall(rule, oldest_snapshot_description)[0]
                      # deregister this AMI
                      try:
                          clientEC2.deregister_image(ImageId=AMI_ID)
                      except ClientError as e:
                          print(e)
                      # delete all snapshots created by this AMI
                      all_oldest_snapshots = clientEC2.describe_snapshots(
                          Filters=[
                              {
                                  'Name': 'description',
                                  'Values': ['*' + AMI_ID + '*']
                              }
                          ]
                      )['Snapshots']
                      for all_oldest_snapshot in all_oldest_snapshots:
                          clientEC2.delete_snapshot(SnapshotId=all_oldest_snapshot['SnapshotId'])
                  Instance = EC2.Instance(EC2_ID)
                  image = Instance.create_image(
                      Name=EC2_ID + time.strftime("%Y-%m-%d-%H-%M-%S", time.localtime())
                  )

  EC2AMIIdParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "EC2AMIId"
      Type: "String"
      Value: !Ref EC2InstanceId
  EC2AMIMaxSnapshot:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "EC2AMIMaxSnapshotNumber"
      Type: "String"
      Value: !Ref MaxAMINumber

